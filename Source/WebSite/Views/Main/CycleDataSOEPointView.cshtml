@*******************************************************************************************************
//  CycleDataSOEPointView.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  04/21/2016 - Stephen Wills
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Collections.Specialized
@using GSF
@using GSF.Data.Model
@using GSF.Web.Model
@using SOETools.Model
@model SOETools.Model.AppModel
@{
    DataContext dataContext = Model.DbDataContext;
    NameValueCollection parameters = Request.QueryString;
    int IncidentID = int.Parse(parameters["IncidentID"] ?? "0");

    string voltageStatePath = Model.GetPageSetting(ViewBag, "voltageStatePath", ViewBag.VoltageStatePath);
    voltageStatePath = Url.Content(voltageStatePath).EnsureEnd('/');
    string breakerElementPath = Model.GetPageSetting(ViewBag, "breakerElementPath", ViewBag.BreakerElementPath);
    breakerElementPath = Url.Content(breakerElementPath).EnsureEnd('/');
    string statusElementPath = Model.GetPageSetting(ViewBag, "statusElementPath", ViewBag.StatusElementPath);
    statusElementPath = Url.Content(statusElementPath).EnsureEnd('/');
    string simpleVoltageStatePath = Model.GetPageSetting(ViewBag, "simpleVoltageStatePath", ViewBag.SimpleVoltageStatePath);
    simpleVoltageStatePath = Url.Content(simpleVoltageStatePath).EnsureEnd('/');
    string simpleBreakerStatusPath = Model.GetPageSetting(ViewBag, "simpleBreakerStatePath", ViewBag.SimpleBreakerStatusPath);
    simpleBreakerStatusPath = Url.Content(simpleBreakerStatusPath).EnsureEnd('/');

    ViewBag.CustomTitle = "SOE Data";
    ViewBag.AddNewEditTitle = "";
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "Name", "Meter Name", "text-center" },
        new[] { "Timestamp", "Date/Time", "text-center" },
        new[] { null, "Phasing", "text-center valign-middle"},
        new[] { null, "Upstate", "text-center valign-middle" },
        new[] { null, "Point code", "text-center valign-middle" },
        new[] { null, "DownState", "text-center valign-middle" },
        new[] { null, "Imax", "text-center valign-middle" },
        new[] { null, "Vmin", "text-center valign-middle" }
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog().ToString();
    ViewBag.HideAddNewButton = true;
    ViewBag.CanEdit = false;
    ViewBag.HideUnauthorizedControls = true;
}
@helper BodyRows()
{
    <td width="11%" class="text-center valign-middle" data-bind="text: Name"></td>
    <td width="11%" class="text-center valign-middle" data-bind="text: Timestamp.formatDate(DateTimeFormat)"></td>
    <td width="11%" class="text-center valign-middle" data-bind="text: Phasing"></td>
    <td width="11%" class="text-center valign-middle" data-bind="data: checkbox.is(':checked') ? renderSimpleVoltageState(UpState) : renderVoltageState(UpState)"></td>
    <td width="11%" class="text-center valign-middle" data-bind="text: checkbox.is(':checked') ? renderSimpleBreakerStatus.bind($data) : renderBreakerStatus.bind($data)"></td>
    <td width="11%" class="text-center valign-middle" data-bind="text: checkbox.is(':checked') ? renderSimpleVoltageState(DownState) : renderVoltageState(DownState)"></td>
    <td width="11%" class="text-center valign-middle" data-bind="text: Imax.toFixed(0)"></td>
    <td width="11%" class="text-center valign-middle" data-bind="text: Vmin.toFixed(0)"></td>
    <td width="11%" class="text-center valign-middle" nowrap><button type="button" class="btn btn-xs" data-bind="click: updateRecord.bind($data)"><span class="glyphicon glyphicon-pencil"></span></button></td>
}

@helper AddNewEditDialog()
{
    <div class="col-md-12">
        <input id="uploadFiles" name="uploadFiles[]" type="file" multiple class="file-loading">
    </div>
}
@Html.Partial("PagedViewModel")

@helper SimpleFilter()
{

    <div style="margin: 5px; text-align: right; cursor: default">
        <label style="font-weight: normal" for="simpleCheckbox">Simple Icons</label>
        <input id="simpleCheckbox" type="checkbox" onchange="reload();"/>
    </div>
}
<div id="soepointTable"></div>

@section Scripts {
    <script type="text/javascript" src="~/Scripts/CycleDataSOEPointView.js"></script>

    <script type="text/javascript">
        @Html.Raw(Model.RenderViewModelConfiguration<CycleDataSOEPointView>(ViewBag, "TimeStamp", IncidentID))

        var checkbox = $('#simpleCheckbox');

        $(function() {
            var childWindow;
            var simpleIsChecked = (Cookies.get('SimpleIsChecked') === 'true');

            if (simpleIsChecked !== undefined)
                checkbox.prop('checked', simpleIsChecked);

            $(window).on("hubConnected", function() {
                dataHub.queryCycleDataSOEPointViewItems(@IncidentID, "Timestamp", true, 1, 100).done(function(records) {
                    $('#soepointTable').puidatatable({
                        columns: [
                            { field: 'Name', bodyStyle: 'text-align: center', headerText: 'Meter Name' },
                            { field: 'Timestamp', bodyStyle: 'text-align: center', headerText: 'Data/Time', content: function(data) { return data.Timestamp.formatDate(DateTimeFormat); } },
                            { field: 'Phasing', bodyStyle: 'text-align: center', headerText: 'Phasing' },
                            { field: 'Upstate', bodyStyle: 'text-align: center', headerText: 'Upstate', content: function(data) { return checkbox.is(':checked') ? renderSimpleVoltageState(data.UpState) : renderVoltageState(data.UpState); } },
                            { field: 'PointCode', bodyStyle: 'text-align: center', headerText: 'Device State', content: function(data) { return checkbox.is(':checked') ? renderSimpleBreakerStatus(data) : renderBreakerStatus(data); } },
                            { field: 'DownState', bodyStyle: 'text-align: center', headerText: 'Downstate', content: function(data) { return checkbox.is(':checked') ? renderSimpleVoltageState(data.DownState) : renderVoltageState(data.DownState); } },
                            { field: 'Imax', bodyStyle: 'text-align: center', headerText: 'Imax', content: function(data) { return data.Imax.toFixed(0); } },
                            { field: 'Vmin', bodyStyle: 'text-align: center', headerText: 'Vmin', content: function(data) { return data.Vmin.toFixed(0); } },
                            { field: '', bodyStyle: 'text-align: center',  content: function(data){
                                return '<button type="button" class="btn btn-xs" onclick="updateRecord()"><span class="glyphicon glyphicon-pencil"></span></button>';

                            }, clickable: false }
                        ],
                        datasource: records,
                        selectionMode: 'single',
                        rowSelect: function(event, data) {
                            window.Highlight = Date.parse(data.Timestamp);

                            if (!childWindow || window.EventID !== data.EventID) {
                                window.EventID = data.EventID;
                                childWindow = window.open("@Url.Content("~/Main/OpenSEE/")" + data.EventID, "SOEChildWindow", "width=auto,height=auto");
                            }

                            if (childWindow.UpdateMarkings)
                                childWindow.UpdateMarkings();
                        }
                    });
                });
            });
        });

        function toggleCheckbox() {
            var checkbox = $('#simpleCheckbox');
            checkbox.prop('checked', !checkbox.is(':checked'));
            reload();
        }

        function reload() {
            if (!hubIsConnected)
                return;

            Cookies.set('SimpleIsChecked', $('#simpleCheckbox').is(':checked'), { expires: 365 });
            $('#soepointTable').puidatatable('reload');
        }

        function renderVoltageState(state) {
            return '<img src="@voltageStatePath' + state + '.png" />';
        }

        function renderSimpleVoltageState(state) {
            return '<img src="@simpleVoltageStatePath' + getSimpleVoltageState(state) + '.png" />';
        }

        function renderBreakerStatus(data) {
            var breakerStatus = '';

            breakerStatus += '<img style="display: inline" src="@breakerElementPath' + 'A' + data.BreakerElementA + '.png" />';
            breakerStatus += '<img style="display: inline" src="@breakerElementPath' + 'C' + data.BreakerElementC + '.png" />';
            breakerStatus += '<img style="display: inline" src="@breakerElementPath' + 'B' + data.BreakerElementB + '.png" />';
            breakerStatus += '<br/>';
            breakerStatus += '<img style="display: inline" src="@statusElementPath' + data.StatusElement + '.png" />';

            return breakerStatus;
        }

        function renderSimpleBreakerStatus(data) {
            return '<img src="@simpleBreakerStatusPath' + getSimpleBreakerStatus(data) + '.png" />';
        }

        function updateRecord(record){
            console.log('hih');
        }
        
        function checkBoxState(){
            return Che
        }
        
        function checkBoxBreaker(){

        }

    </script>
}