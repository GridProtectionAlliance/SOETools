@*******************************************************************************************************
//  CycleDataSOEPointView.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  04/21/2016 - Stephen Wills
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Collections.Specialized
@using GSF
@using GSF.Data.Model
@using GSF.Web.Model
@using SOETools.Model
@model SOETools.Model.AppModel
@{
    DataContext dataContext = Model.DbDataContext;
    NameValueCollection parameters = Request.QueryString;
    int IncidentID = int.Parse(parameters["IncidentID"] ?? "0");

    string voltageStatePath = Model.GetPageSetting(ViewBag, "voltageStatePath", ViewBag.VoltageStatePath);
    voltageStatePath = Url.Content(voltageStatePath).EnsureEnd('/');
    string breakerElementPath = Model.GetPageSetting(ViewBag, "breakerElementPath", ViewBag.BreakerElementPath);
    breakerElementPath = Url.Content(breakerElementPath).EnsureEnd('/');
    string statusElementPath = Model.GetPageSetting(ViewBag, "statusElementPath", ViewBag.StatusElementPath);
    statusElementPath = Url.Content(statusElementPath).EnsureEnd('/');
    string simpleVoltageStatePath = Model.GetPageSetting(ViewBag, "simpleVoltageStatePath", ViewBag.SimpleVoltageStatePath);
    simpleVoltageStatePath = Url.Content(simpleVoltageStatePath).EnsureEnd('/');
    string simpleBreakerStatusPath = Model.GetPageSetting(ViewBag, "simpleBreakerStatePath", ViewBag.SimpleBreakerStatusPath);
    simpleBreakerStatusPath = Url.Content(simpleBreakerStatusPath).EnsureEnd('/');
}

<div style="margin: 5px; text-align: right; cursor: default">
    <label style="font-weight: normal" for="simpleCheckbox">Simple Icons</label>
    <input id="simpleCheckbox" type="checkbox" onchange="reload();"/>
</div>

<div id="soepointTable"></div>

@section Scripts {
    <script type="text/javascript">
        $(function() {
            var childWindow;
            var checkbox = $('#simpleCheckbox');
            var simpleIsChecked = (Cookies.get('SimpleIsChecked') === 'true');
            
            if (simpleIsChecked !== undefined)
                checkbox.prop('checked', simpleIsChecked);

            $(window).on("hubConnected", function() {
                dataHub.queryCycleDataSOEPointViewItems(@IncidentID, "StartTime", true, 1, 100).done(function(records) {
                    $('#soepointTable').puidatatable({
                        columns: [
                            { field: 'Name', bodyStyle: 'text-align: center', headerText: 'Meter Name' },
                            { field: 'Timestamp', bodyStyle: 'text-align: center', headerText: 'Data/Time', content: function(data) { return data.Timestamp.formatDate(DateTimeFormat); } },
                            { field: 'Phasing', bodyStyle: 'text-align: center', headerText: 'Phasing' },
                            { field: 'Upstate', bodyStyle: 'text-align: center', headerText: 'Upstate', content: function(data) { return checkbox.is(':checked') ? renderSimpleVoltageState(data.UpState) : renderVoltageState(data.UpState); } },
                            { field: 'PointCode', bodyStyle: 'text-align: center', headerText: 'Device State', content: function(data) { return checkbox.is(':checked') ? renderSimpleBreakerStatus(data) : renderBreakerStatus(data); } },
                            { field: 'DownState', bodyStyle: 'text-align: center', headerText: 'Downstate', content: function(data) { return checkbox.is(':checked') ? renderSimpleVoltageState(data.DownState) : renderVoltageState(data.DownState); } },
                            { field: 'Imax', bodyStyle: 'text-align: center', headerText: 'Imax', content: function(data) { return data.Imax.toFixed(0); } },
                            { field: 'Vmin', bodyStyle: 'text-align: center', headerText: 'Vmin', content: function(data) { return data.Vmin.toFixed(0); } }
                        ],
                        datasource: records,
                        selectionMode: 'single',
                        rowSelect: function(event, data) {
                            window.Highlight = Date.parse(data.Timestamp);

                            if (!childWindow || window.EventID !== data.EventID) {
                                window.EventID = data.EventID;
                                childWindow = window.open("@Url.Content("~/Main/OpenSEE/")" + data.EventID, "SOEChildWindow", "width=auto,height=auto");
                            }

                            if (childWindow.UpdateMarkings)
                                childWindow.UpdateMarkings();
                        }
                    });
                });
            });
        });

        function toggleCheckbox() {
            var checkbox = $('#simpleCheckbox');
            checkbox.prop('checked', !checkbox.is(':checked'));
            reload();
        }

        function reload() {
            if (!hubIsConnected)
                return;
            
            Cookies.set('SimpleIsChecked', $('#simpleCheckbox').is(':checked'), { expires: 365 });
            $('#soepointTable').puidatatable('reload');
        }

        function renderVoltageState(state) {
            return '<img src="@voltageStatePath' + state + '.png" />';
        }

        function renderSimpleVoltageState(state) {
            var simpleState;

            if (state.indexOf('0') >= 0)
                simpleState = '3';
            else if (state.indexOf('2') >= 0)
                simpleState = '1';
            else if (state.indexOf('3') >= 0)
                simpleState = '2';
            else
                simpleState = '0';

            return '<img src="@simpleVoltageStatePath' + simpleState + '.png" />';
        }

        function renderBreakerStatus(data) {
            var breakerStatus = '';

            breakerStatus += '<img style="display: inline" src="@breakerElementPath' + 'A' + data.BreakerElementA + '.png" />';
            breakerStatus += '<img style="display: inline" src="@breakerElementPath' + 'C' + data.BreakerElementC + '.png" />';
            breakerStatus += '<img style="display: inline" src="@breakerElementPath' + 'B' + data.BreakerElementB + '.png" />';
            breakerStatus += '<br/>';
            breakerStatus += '<img style="display: inline" src="@statusElementPath' + data.StatusElement + '.png" />';

            return breakerStatus;
        }

        function renderSimpleBreakerStatus(data) {
            var summaryState;
            var simpleState;
            
            summaryState =
                data.BreakerElementA +
                data.BreakerElementC +
                data.BreakerElementB;
            
            if (summaryState.indexOf('5') >= 0)
                simpleState = '5';
            else if (data.StatusElement.startsWith('3'))
                simpleState = '4'
            else if (summaryState.indexOf('4') >= 0)
                simpleState = '2';
            else if (summaryState.indexOf('1') >= 0)
                simpleState = '1'
            else
                simpleState = '3';

            return '<img src="@simpleBreakerStatusPath' + simpleState + '.png" />';
        }
    </script>
}